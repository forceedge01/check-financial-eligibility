version: 2.1

orbs:
  slack: circleci/slack@3.4.2

references:
  build_linting_config: &build_linting_config
    docker:
      - image: circleci/ruby:2.6.6-node-browsers
        environment:
          - RAILS_ENV=test
          - TZ: "Europe/London"
  cloud_platform_container_config: &cloud_platform_container_config
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci
        environment:
          GITHUB_TEAM_NAME_SLUG: laa-apply-for-legal-aid
  build_container_config: &build_container_config
    docker:
      - image: circleci/ruby:2.6.6-node-browsers
        environment:
          - RAILS_ENV=test
          - PGHOST=localhost
          - PGUSER=user
          - TZ: "Europe/London"
      - image: postgres:10.5
        environment:
          - POSTGRES_USER=user
          - POSTGRES_DB=check_financial_eligibility_test
  build_docker_image: &build_docker_image
    run:
      name: Build docker image
      command: |
        docker build \
        --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
        --build-arg BUILD_TAG="app-${CIRCLE_SHA1}" \
        --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
        -t app .
  push_to_ecr: &push_to_ecr
    run:
      name: Push image to ecr repo
      command: |
        docker tag app "${ECR_ENDPOINT}/laa-apply-for-legal-aid/check-financial-eligibility-service:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}/laa-apply-for-legal-aid/check-financial-eligibility-service:${CIRCLE_SHA1}"

        if [ "${CIRCLE_BRANCH}" == "master" ]; then
          docker tag app "${ECR_ENDPOINT}/laa-apply-for-legal-aid/check-financial-eligibility-service:latest"
          docker push "${ECR_ENDPOINT}/laa-apply-for-legal-aid/check-financial-eligibility-service:latest"
        fi
  setup_aws_login: &setup_aws_login
    run:
      name: Setup aws login
      command: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        sudo pip3 install awscli
        $(aws ecr get-login --region eu-west-2 --no-include-email)
  setup_kubectl: &setup_kubectl
    run:
      name: Kubectl deployment setup UAT
      command: |
        $(aws ecr get-login --region eu-west-2 --no-include-email)
        setup-kube-auth
  update_packages: &update_packages
    run:
      name: Update packages
      command: sudo apt-get update
  install_packages_for_testing: &install_packages_for_testing
    run:
      name: Install System packages needed for testing
      command: sudo apt-get install -y postgresql-client
  install_git_crypt: &install_git_crypt
    run:
      name: Install git-crypt
      command: sudo apt-get install -y git-crypt
  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
        git-crypt unlock git-crypt.key
  restore_gems_cache: &restore_gems_cache
    restore_cache:
      keys:
        - check-financial-eligibility-{{ checksum "Gemfile.lock" }}
        - check-financial-eligibility
  install_gems: &install_gems
    run:
      name: Install ruby gems
      command: |
        gem install bundler -v 2.0.2
        bundle install --path=vendor/bundle --jobs=4 && bundle clean
  save_gems_cache: &save_gems_cache
    save_cache:
      key: check-financial-eligibility-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle

  install_js_packages: &install_js_packages
    run:
      name: Install npm packages
      command: npm install

  setup_database: &setup_database
    run:
      name: Database Setup
      command: |
        bundle exec rake db:create db:schema:load
        bundle exec rake db:migrate

commands:
  hold-notification:
    description: Notify Slack about an awaiting approval job
    parameters:
      message:
        default: "$CIRCLE_USERNAME has a pending approval for $CIRCLE_BRANCH"
        description: A workflow in CircleCI is awaiting approval.
        type: string
      url:
        default: 'https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}'
        description: The URL to link back to.
        type: string
      webhook:
        default: '${SLACK_WEBHOOK}'
        description: >-
          Enter either your Webhook value or use the CircleCI UI to add your token
          under the 'SLACK_WEBHOOK' env var
        type: string
    steps:
      - slack/approval:
          message: << parameters.message >>
          webhook: << parameters.webhook >>
jobs:
  lint_checks:
    <<: *build_linting_config
    steps:
      - checkout
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - run:
          name: Run Rubocop
          command:  bin/rails rubocop

  unit_tests:
    <<: *build_container_config
    steps:
      - checkout
      - *install_packages_for_testing
      - *restore_gems_cache
      - *install_gems
      - *save_gems_cache
      - *setup_database
      - *install_js_packages
      - run:
          name: Run ruby tests
          command: bin/rails spec
  build_and_push:
    <<: *build_container_config
    steps:
    - checkout
    - setup_remote_docker
    - *update_packages
    - *install_git_crypt
    - *decrypt_secrets
    - *build_docker_image
    - *setup_aws_login
    - *push_to_ecr
  deploy_uat:
    <<: *cloud_platform_container_config
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *setup_kubectl
      - run:
          name: Set kubectl context
          command: kubectl config use-context uat
      - *decrypt_secrets
      - deploy:
          name: Helm deployment to UAT
          command: |
            ./bin/uat_deploy
  delete_uat:
    <<: *cloud_platform_container_config
    steps:
      - checkout
      - setup_remote_docker
      - *setup_kubectl
      - run:
          name: Set kubectl context
          command: kubectl config use-context uat
      - run:
          name: Delete UAT release
          command: |
            ./bin/delete_uat_release.sh
  deploy_staging:
    <<: *cloud_platform_container_config
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *setup_kubectl
      - run:
          name: Set kubectl context
          command: kubectl config use-context staging
      - *decrypt_secrets
      - deploy:
          name: Helm deployment to staging
          command: |
            helm upgrade check-financial-eligibility ./deploy/helm/. \
                          --install --wait \
                          --tiller-namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                          --namespace=${KUBE_ENV_STAGING_NAMESPACE} \
                          --values ./deploy/helm/values-staging.yaml \
                          --set image.repository="$ECR_ENDPOINT/laa-apply-for-legal-aid/check-financial-eligibility-service" \
                          --set image.tag="${CIRCLE_SHA1}"
  hold_production_notification:
    <<: *cloud_platform_container_config
    steps:
      - hold-notification:
          message: "$CIRCLE_USERNAME has a pending CFE production approval for $CIRCLE_BRANCH"
  deploy_production:
    <<: *cloud_platform_container_config
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - *setup_kubectl
      - run:
          name: Set kubectl context
          command: kubectl config use-context production
      - *decrypt_secrets
      - deploy:
          name: Helm deployment to production
          command: |
            helm upgrade check-financial-eligibility ./deploy/helm/. \
                        --install --wait \
                        --tiller-namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} \
                        --namespace=${KUBE_ENV_PRODUCTION_NAMESPACE} \
                        --values ./deploy/helm/values-production.yaml \
                        --set image.repository="$ECR_ENDPOINT/laa-apply-for-legal-aid/check-financial-eligibility-service" \
                        --set image.tag="${CIRCLE_SHA1}"
  clean_up_ecr:
    <<: *build_linting_config
    steps:
      - checkout
      - setup_remote_docker
      - *setup_aws_login
      - run:
          name: Delete old images from ecr repo
          command: |
            ./bin/clean_up_ecr

workflows:
  version: 2
  add_branch:
    jobs:
      - lint_checks:
          filters:
            branches:
              ignore: master
      - unit_tests:
          requires:
            - lint_checks
      - build_and_push:
          requires:
            - lint_checks
      - deploy_uat:
          requires:
            - build_and_push
  merge_pr:
    jobs:
      - lint_checks:
          filters:
            branches:
              only: master
      - unit_tests:
          requires:
            - lint_checks
      - build_and_push:
          requires:
            - lint_checks
      - deploy_uat:
          requires:
            - build_and_push
      - delete_uat:
          requires:
            - deploy_uat
      - deploy_staging:
          requires:
            - unit_tests
            - build_and_push
      - hold_production_notification:
          requires:
            - deploy_staging
      - hold_production:
          type: approval
          requires:
            - delete_uat
      - deploy_production:
          requires:
            - hold_production_notification
            - hold_production

  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only: master
    jobs:
      - clean_up_ecr
